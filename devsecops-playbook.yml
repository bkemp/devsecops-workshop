---

- hosts: localhost
  connection: local

  vars_files:
   - vars/aws.example.yml

  tasks:
   - import_role:
      name: install-webpage

   - name: Gather vpc facts
     ec2_vpc_net_facts:
      region: "{{ aws_region }}"
      filters:
       "tag:Name": "{{ cluster_name_verbose }}"
       "tag:OpenShiftClusterName": "{{ cluster_name }}"
       "tag:OpenShiftClusterNameVerbose": "{{ cluster_name_verbose }}"
     register: ec2_vpc_net

   - set_fact:
       ec2_vpc_id: "{{ ec2_vpc_net['vpcs'][0]['id'] }}"

   - name: Create bastion security group
     ec2_group:
       name: "{{ cluster_name_verbose }}-bastion"
       description: "{{ cluster_name_verbose }}-bastion"
       vpc_id: "{{ ec2_vpc_id }}"
       region: "{{ aws_region }}"
       rules:
        - proto: tcp
          ports: "{{ bastion_port_wetty }}"
          cidr_ip: 0.0.0.0/0
       tags:
         Name: "{{ cluster_name_verbose }}-bastion"
         OpenShiftClusterName: "{{ cluster_name }}"
         OpenShiftClusterNameVerbose: "{{ cluster_name_verbose }}"
       state: present
     register: ec2_create_security_group_bastion

   - set_fact:
       ec2_security_group_bastion_id: "{{ ec2_create_security_group_bastion.group_id }}"

   - name: Gather bastion instance facts
     ec2_instance_facts:
      region: "{{ aws_region }}"
      filters:
       instance-state-name: running
       "tag:OpenShiftClusterName": "{{ cluster_name }}"
       "tag:OpenShiftClusterNameVerbose": "{{ cluster_name_verbose }}"
       "tag:OpenShiftBastion": "true"
     register: ec2_bastion_instance

   - set_fact:
       ec2_instance_bastion_id: "{{ ec2_bastion_instance['instances'][0]['instance_id'] }}"

   - name: Gather facts about various security groups
     ec2_group_facts:
      region: "{{ aws_region }}"
      filters:
        group-name:
          - "{{ cluster_name_verbose }}-cluster"
          - "{{ cluster_name_verbose }}-ssh"
          - "{{ cluster_name_verbose }}-{{ bastion_name_tag }}"
     register: ec2_group_facts_bastion

   - name: Build a list of all the security group names.
     set_fact:
       bastion_security_group_ids: "{{ bastion_security_group_ids }} + [ '{{ item.group_id }}' ]"
     with_items: "{{ ec2_group_facts_bastion.security_groups }}"

   - name: Append string to list
     set_fact:
       my_strings: "{{ bastion_security_group_ids }} + [ '{{ ec2_security_group_bastion_id }}' ]"

   - name: Join list into string
     set_fact:
       ec2_security_group_ids_new: "{{ my_strings | join(' ') }}"

   - name: Modify instance attribute to include new security group
     local_action: "shell aws --region {{ aws_region }} ec2 modify-instance-attribute --instance-id {{ ec2_instance_bastion_id }} --groups {{ ec2_security_group_ids_new  }}"

   - name: Add host facts to bastion node
     add_host:
       name: "bastion.{{ cluster_name }}.{{ openshift_base_domain }}"
       ansible_host: "{{ ec2_bastion_instance['instances'][0]['public_ip_address'] }}"
       ansible_ssh_private_key_file: "{{ ec2_key_file }}"
       ansible_user: ec2-user
       rhsm_consumer_name: "{{ ec2_bastion_instance['instances'][0]['tags']['Name'] }}"
       groups:
        - openshift_role_bastion
        - "openshift_cluster_{{ cluster_group_name }}"

- hosts: openshift_role_bastion:&openshift_cluster_{{ cluster_group_name }}
  any_errors_fatal: yes

  vars_files:
   - vars/aws.example.yml

  roles:
   - install-oc
   - install-odo
   - install-jq
   - install-pip
   - install-epel
   - install-passlib
   - install-git
   - install-oscap
   - install-wetty
   - setup-users
   - setup-dcmm
   - setup-cicd

  post_tasks:
   - name: Confirmation message
     debug:
       msg: |
        "The script has completed successfully."
        "Wetty console: https://{{ openshift_public_hostname }}:{{ bastion_port_wetty }}"
        "Please Restart your Openshift Cluster."     
     when: install_wetty   
